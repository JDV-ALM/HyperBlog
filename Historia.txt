Curso de Git y GitHub:clear

Comandos git:

Configuracion de Git:
$ git config --list
Ver las configuraciones actuales

$ git config --global user.name "Nombre"
$ git config --global user.email "Email"
Comandos para cambiar las configuraciones

$ git ini 
Se utiliza para inicializar el repositorio

$ git status
Ver el estado del repositorio

$ git add / git add . 
Anadir un archivo o todos los archivo de una carpeta al estado Tracked (Entra en Staging)

$ git commint - m "Mensaje de; commit"
Se utiliza ra hacer commit

$ git show
Muestra la ultima modificacion

$ git log
Muetra todos los commit

$ git diff
Se utiliza para comparar commits

$ git checkout master (Archivo) / codigo commit (archivo)
Traer una version antigua o restaurar la version actual de un archivo

$ git checkout (rama)
Nos permite movernos entre ramas

$ git reset  (Codigo del commit) --hard --soft
Ir y borrar las versiones 

$ git commit -am
Es la union del Git add con Git Commit

$ git merge
Une algura rama con la rama actual eliminando la otra 

$ git branch 
Me indica las ramas y en cual estoy

$ git branch -m 
Cambiar el nombre de la rama

esc + shift + ZZ / Q
Salir de Todo


Crear Llaves ssh
$ ssh-keygen -t rsa -b 4096 -C "Correo"
Alli asignamos la contrasena y si queremos guardamos la llave en otra carpeta.

$ eval $(ssh-agent -s) - eval $"ssh-agent -s" (MAC Clase 19) 
Con este evaluamos que el servidos de SSH esta corriendo 

$ ssh-add ~/.ssh/id_rsa
Agregamos la llave al sistema

conectar Github - Anadimos la llave a Github y luego

$ git remote add origin LINK
conectamos el git

$ git remote -v 
Validamos 

$ git push origin main
Hacer el push a servidor. Nos va a dar error porque hay que hacer el pull primero. Importante cambiar la rama a main 

$ git pull origin main --allow-unrelated-histories


$ git stash (branch new)
Guarda temporalmente un cambio

$ git stash list 
Ver los cambios

$ git stash pop
Suelta los cambios

$ git stash drop
Borra el stash


Otros Comandos:
$ clear
Limpiar la consola

$ code 
Abrir VSC



Crear Alias
$ alias nombre="Codigo"

Crear un Tag 
$ git tag -a nombre -m "Mensaje" HASH

Ver Tag asignado
$git show-ref --tags

Enviar Tags
$ git push origin main --tags

Eliminar tags
$ git push origin main :refs/tags/v0.12

$ gitk 
Vista Grafica


Clonar repositorio 
$ git clone 

Borrar archivos no traqueados para limpiar el repo (Prueba)
$ git clean --dry-run

Borrar archivos no traqueados para limpiar el repo (Prueba)
$ git clean -f



Traer un commit de otra rama
$ cherry-pick (HASH)



Buscar palabras 
$ git grep -n (palabra)

Buscar en commit 
$ git log -s ("palabra")



$ git shortlog -sn
Muestra cuantos commit han hecho cada miembros del equipo.

$ git shortlog -sn --all
Muestra cuantos commit han hecho cada miembros del equipo hasta los que han sido eliminado

$ git shortlog -sn --all --no-merge
Muestra cuantos commit han hecho cada miembros quitando los eliminados sin los merges

$ git blame ARCHIVO
Muestra quien hizo cada cosa linea por linea

$ git COMANDO --help
Muestra como funciona el comando.

$ git blame ARCHIVO -Llinea_inicial,linea_final
Muestra quien hizo cada cosa linea por linea indic√°ndole desde que linea ver ejemplo -L35,50

$ git branch -r 
Muestran todas las ramas remotas

$ git branch -a
Muestran todas las ramas tanto locales como remotas